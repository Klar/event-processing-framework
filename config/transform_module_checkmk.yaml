---
# vim: foldmarker=[[[,]]]:foldmethod=marker

# SPDX-FileCopyrightText: 2021 Aswath N Srinivasan <asns@shi-gmbh.com>
# SPDX-FileCopyrightText: 2021 Robin Schneider <robin.schneider@geberit.com>
#
# SPDX-License-Identifier: AGPL-3.0-only

transforms:
  transform_module_checkmk:
    type: remap
    inputs:
      - 'transform_route_to_module.checkmk'
    source: |-
      .ecs.version = "1.11.0"
      .event.kind = "event"

      .event.original = .message
      if (exists(.__)) {
        .__.fingerprint_inputs = push!(.__.fingerprint_inputs, .event.original)
      } else {
        # Module called from isolated unit test.
        .__.parse_failures_short = []
        .__.parse_failures = []
        .__.parse_warnings_short = []
        .__.parse_warnings = []
      }

      .observer = del(.host)
      .__.enabled_postprocessors."host name QA"."host.name" = false

      parsed_message, err = parse_grok(.message, "%{TIMESTAMP_ISO8601:timestamp_iso}\\s\\[%{NONNEGINT:event.severity}\\]\\s\\[%{WORD:log.logger}(?:\\s%{NONNEGINT:process.pid})?\\]\\s*%{DATA:message}\\s*$")

      if err != null {
        .__.parse_failures_short = push(.__.parse_failures_short, "parse_failure, grok")
        .__.parse_failures = push(.__.parse_failures, "parse_failure, grok: " + err)

        # checkmk.audit parsing [[[
        if (match(.event.dataset, r'^checkmk.audit$')) {
          parsed_audit_message, err_audit = parse_grok(.message, "%{DATA:timestamp_s} (?:- %{DATA:user.name}\\s+%{DATA:event.action}\\s+)?%{GREEDYDATA:message}$")
         if err_audit != null {
           .__.parse_failures_short = push(.__.parse_failures_short, "parse_failure, audi_grok")
           .__.parse_failures = push(.__.parse_failures, "parse_failure, audt_grok: " + err_audit)
         } else {
           . |= parsed_audit_message
           ."@timestamp" = to_timestamp!(del(.timestamp_s))
           .event.action = del(."event.action")
           .user.name = del(."user.name")
         }
        }
        # ]]]

      } else {
        # Timestamp parsing [[[
        parsed_timestamp, err_timestamp = if (!is_nullish(parsed_message.timestamp_iso)) {
          parse_timestamp(parsed_message.timestamp_iso, format: "%Y-%m-%d %T")
        }
        if err_timestamp != null {
          .__.parse_failures_short, err = push(.__.parse_failures_short, "parse_failure: @timestamp parsing")
          .__.parse_failures, err = push(.__.parse_failures, "parse_failure: @timestamp parsing: Could not parse @timestamp. " + err_timestamp)
        } else {
          ."@timestamp" = parsed_timestamp
        }
        # ]]]

        .event.severity = parse_int!(parsed_message."event.severity")

        # This is not the name of the process so process.name does not apply.
        .log.logger = parsed_message."log.logger"

        # Core is reporting the actual PID, other services of CheckMK seem to
        # report something like an instance number/ID.
        # This can easily be spotted because PID 1 and PID 0 have special
        # meaning in Linux.
        if (.log.logger == "core") {
          .process.pid = parse_int!(parsed_message."process.pid")
        } else {
          # If the event was not from an observer, service.id could maybe
          # represent this, but here, lets append the value to log.logger.
          .log.logger = string!(.log.logger) + " " + string!(parsed_message."process.pid")
        }
        .message = parsed_message.message

        # .message parsing [[[
        if (contains(parsed_message.message, "Executing external command")) {
          if (contains(parsed_message.message, "HOST NOTIFICATION")) {
            parsed_inner_message, err = parse_grok(parsed_message.message, "^Executing external command:\\s*LOG;HOST NOTIFICATION:\\s*(?<contact>[^;]+?);\\s*(?<host.name>[^;]+?);\\s*(?<host.state>[^;]+?);\\s*(?<alarm_type>[^;]+?);%{GREEDYDATA:inner_message}$")
            if err != null {
              .__.parse_failures_short = push(.__.parse_failures_short, "parse_failure, inner_message_grok")
              .__.parse_failures = push(.__.parse_failures, "parse_failure, inner_message_grok: " + err)

            } else {
              . |= parsed_inner_message
            }
          } else if (contains(parsed_message.message, "SERVICE NOTIFICATION")) {
            parsed_inner_message, err = parse_grok(parsed_message.message, "^Executing external command:\\s*LOG;SERVICE NOTIFICATION:\\s*(?<contact>[^;]+?);\\s*(?<host.name>[^;]+?);\\s*(?<service.name>[^;]+?);\\s*(?<service.state>[^;]+?);\\s*(?<alarm_type>[^;]+?);%{GREEDYDATA:inner_message}$")
            if err != null {
              .__.parse_failures_short  = push!(.__.parse_failures_short, "parse_failure, inner_message_grok")
              .__.parse_failures = push!(.__.parse_failures, "parse_failure, inner_message_grok: " + err)

            } else {
              . |= parsed_inner_message
            }
          }
          if (is_nullish(.contact)) {
            del(.contact)
          } else {
            .checkmk.cmc.contact = split!(del(.contact), ",")
          }
          if (is_nullish(."observer.hostname")) { del(."observer.hostname") } else { .observer.hostname = del(."observer.hostname") }
          if (is_nullish(."host.name")) { del(."host.name") } else { .host.name = del(."host.name") }
          if (is_nullish(."service.name")) { del(."service.name") } else { .service.name = del(."service.name") }
          if (is_nullish(."log.logger")) { del(."log.logger") } else { .log.logger = del(."log.logger") }
          object_state = null
          if (is_nullish(."host.state")) {
            del(."host.state")
          } else {
            .host.state = downcase!(del(."host.state"))
            object_state = .host.state
          }
          if (is_nullish(."service.state")) {
            del(."service.state")
          } else {
            .service.state = downcase!(del(."service.state"))
            object_state = .service.state
          }
          if (!is_nullish(object_state)) {
            object_state_to_event_severity = {
               "up" : 5,
               "down" : 4,
               "ok" : 5,
               "warning" : 4,
               "critical" : 2,
            }
            .event.severity = get!(object_state_to_event_severity, path:[object_state])
            if err != null {
              .__.parse_warnings_short = push!(.__.parse_warnings_short, "parse_warning: event.severity")
              .__.parse_warnings = push!(.__.parse_warnings, "parse_warning: event.severity: Could not get() .checkmk.cmc.monitor.status. " + err)
            }
          }
          if (is_nullish(.alarm_type)) { del(.alarm_type) } else { .checkmk.cmc.alarm_type = del(.alarm_type) }
          .message = del(.inner_message)
          .event.kind = "alert"
        }
        # ]]]

      }
