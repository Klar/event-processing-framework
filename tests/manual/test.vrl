# vim: foldmarker=[[[,]]]:foldmethod=marker

# SPDX-FileCopyrightText: 2022 Robin Schneider <ro.schneider@senec.com>
#
# SPDX-License-Identifier: AGPL-3.0-only

.__.parse_failures_short = []
.__.parse_failures = []
.__.parse_warnings_short = []
.__.parse_warnings = []

parsed_syslog = .

field_spec_to_transform = [
  {"source": ["meta", "sysUpTime"],  "destination": ["host", "uptime"]},
  {"source": ["meta", "sequenceId"], "destination": ["event", "sequence"]},
]
for_each(field_spec_to_transform) -> |_index, field_spec| {
  if (get!(parsed_syslog, path: field_spec.source) != null) {
    if (!is_string(get!(parsed_syslog, path: field_spec.source))) {
      .__.parse_warnings_short = push(.__.parse_warnings_short, "parse_warning: syslog")
      .__.parse_warnings = push(.__.parse_warnings, "parse_warning: syslog: Drop non-string-encoded int field " + join!(field_spec.source, separator: ".") + ".")
      remove!(parsed_syslog, path: field_spec.source)
    } else {
      parsed_value, err = parse_int(string!(get!(parsed_syslog, path: field_spec.source)))
      if err != null {
        .__.parse_warnings_short = push(.__.parse_warnings_short, "parse_warning: syslog")
        .__.parse_warnings = push(.__.parse_warnings, "parse_warning: syslog: Drop non-int field " + join!(field_spec.source, separator: ".") + ": " + err + ". String: " + string!(get!(parsed_syslog, path: field_spec.source)))
      } else {
        if (field_spec.destination == ["host", "uptime"]) {
          parsed_value = to_int(round(parsed_value / 100))
        }
        . = set!(value: ., path: field_spec.destination, data: parsed_value)
      }
      remove!(parsed_syslog, path: field_spec.source)
    }
  }
}
.
